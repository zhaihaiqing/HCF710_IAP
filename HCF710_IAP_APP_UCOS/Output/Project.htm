<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Mar 23 09:46:03 2020
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PAS_Task &rArr; Level_height_conversion &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a4]">CPU_IntDis</a>
 <LI><a href="#[161]">CPU_IntEn</a>
 <LI><a href="#[8e]">CPU_SR_Save</a>
 <LI><a href="#[90]">CPU_SR_Restore</a>
 <LI><a href="#[162]">CPU_WaitForInt</a>
 <LI><a href="#[163]">CPU_WaitForExcept</a>
 <LI><a href="#[136]">CPU_CntLeadZeros</a>
 <LI><a href="#[164]">CPU_CntTrailZeros</a>
 <LI><a href="#[165]">CPU_RevBits</a>
 <LI><a href="#[10c]">OSStartHighRdy</a>
 <LI><a href="#[7]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">App_NMI_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">App_NMI_ISR</a><BR>
 <LI><a href="#[2]">App_Fault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">App_Fault_ISR</a><BR>
 <LI><a href="#[3]">App_MemFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">App_MemFault_ISR</a><BR>
 <LI><a href="#[4]">App_BusFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">App_BusFault_ISR</a><BR>
 <LI><a href="#[5]">App_UsageFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">App_UsageFault_ISR</a><BR>
 <LI><a href="#[6]">App_Spurious_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">App_Spurious_ISR</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[53]">AppTaskStart</a> from main.o(i.AppTaskStart) referenced from main.o(i.main)
 <LI><a href="#[4]">App_BusFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[2]">App_Fault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[3]">App_MemFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1]">App_NMI_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[6]">App_Spurious_ISR</a> from cstartup.o(.text) referenced 7 times from cstartup.o(RESET)
 <LI><a href="#[5]">App_UsageFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1b]">BSP_IntHandlerADC1</a> from bsp_int.o(i.BSP_IntHandlerADC1) referenced from cstartup.o(RESET)
 <LI><a href="#[40]">BSP_IntHandlerAES</a> from bsp_int.o(i.BSP_IntHandlerAES) referenced from cstartup.o(RESET)
 <LI><a href="#[1f]">BSP_IntHandlerCOMP</a> from bsp_int.o(i.BSP_IntHandlerCOMP) referenced from cstartup.o(RESET)
 <LI><a href="#[41]">BSP_IntHandlerCOMP_ACQ</a> from bsp_int.o(i.BSP_IntHandlerCOMP_ACQ) referenced from cstartup.o(RESET)
 <LI><a href="#[1e]">BSP_IntHandlerDAC</a> from bsp_int.o(i.BSP_IntHandlerDAC) referenced from cstartup.o(RESET)
 <LI><a href="#[14]">BSP_IntHandlerDMA1_CH1</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH1) referenced from cstartup.o(RESET)
 <LI><a href="#[15]">BSP_IntHandlerDMA1_CH2</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH2) referenced from cstartup.o(RESET)
 <LI><a href="#[16]">BSP_IntHandlerDMA1_CH3</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH3) referenced from cstartup.o(RESET)
 <LI><a href="#[17]">BSP_IntHandlerDMA1_CH4</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH4) referenced from cstartup.o(RESET)
 <LI><a href="#[18]">BSP_IntHandlerDMA1_CH5</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH5) referenced from cstartup.o(RESET)
 <LI><a href="#[19]">BSP_IntHandlerDMA1_CH6</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH6) referenced from cstartup.o(RESET)
 <LI><a href="#[1a]">BSP_IntHandlerDMA1_CH7</a> from bsp_int.o(i.BSP_IntHandlerDMA1_CH7) referenced from cstartup.o(RESET)
 <LI><a href="#[3b]">BSP_IntHandlerDMA2_CH1</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH1) referenced from cstartup.o(RESET)
 <LI><a href="#[3c]">BSP_IntHandlerDMA2_CH2</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH2) referenced from cstartup.o(RESET)
 <LI><a href="#[3d]">BSP_IntHandlerDMA2_CH3</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH3) referenced from cstartup.o(RESET)
 <LI><a href="#[3e]">BSP_IntHandlerDMA2_CH4</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH4) referenced from cstartup.o(RESET)
 <LI><a href="#[3f]">BSP_IntHandlerDMA2_CH5</a> from bsp_int.o(i.BSP_IntHandlerDMA2_CH5) referenced from cstartup.o(RESET)
 <LI><a href="#[4d]">BSP_IntHandlerDummy</a> from bsp_int.o(i.BSP_IntHandlerDummy) referenced from bsp_int.o(i.BSP_IntInit)
 <LI><a href="#[f]">BSP_IntHandlerEXTI0</a> from bsp_int.o(i.BSP_IntHandlerEXTI0) referenced from cstartup.o(RESET)
 <LI><a href="#[10]">BSP_IntHandlerEXTI1</a> from bsp_int.o(i.BSP_IntHandlerEXTI1) referenced from cstartup.o(RESET)
 <LI><a href="#[31]">BSP_IntHandlerEXTI15_10</a> from bsp_int.o(i.BSP_IntHandlerEXTI15_10) referenced from cstartup.o(RESET)
 <LI><a href="#[11]">BSP_IntHandlerEXTI2</a> from bsp_int.o(i.BSP_IntHandlerEXTI2) referenced from cstartup.o(RESET)
 <LI><a href="#[12]">BSP_IntHandlerEXTI3</a> from bsp_int.o(i.BSP_IntHandlerEXTI3) referenced from cstartup.o(RESET)
 <LI><a href="#[13]">BSP_IntHandlerEXTI4</a> from bsp_int.o(i.BSP_IntHandlerEXTI4) referenced from cstartup.o(RESET)
 <LI><a href="#[20]">BSP_IntHandlerEXTI9_5</a> from bsp_int.o(i.BSP_IntHandlerEXTI9_5) referenced from cstartup.o(RESET)
 <LI><a href="#[d]">BSP_IntHandlerFLASH</a> from bsp_int.o(i.BSP_IntHandlerFLASH) referenced from cstartup.o(RESET)
 <LI><a href="#[29]">BSP_IntHandlerI2C1_ER</a> from bsp_int.o(i.BSP_IntHandlerI2C1_ER) referenced from cstartup.o(RESET)
 <LI><a href="#[28]">BSP_IntHandlerI2C1_EV</a> from bsp_int.o(i.BSP_IntHandlerI2C1_EV) referenced from cstartup.o(RESET)
 <LI><a href="#[2b]">BSP_IntHandlerI2C2_ER</a> from bsp_int.o(i.BSP_IntHandlerI2C2_ER) referenced from cstartup.o(RESET)
 <LI><a href="#[2a]">BSP_IntHandlerI2C2_EV</a> from bsp_int.o(i.BSP_IntHandlerI2C2_EV) referenced from cstartup.o(RESET)
 <LI><a href="#[21]">BSP_IntHandlerLCD</a> from bsp_int.o(i.BSP_IntHandlerLCD) referenced from cstartup.o(RESET)
 <LI><a href="#[a]">BSP_IntHandlerPVD</a> from bsp_int.o(i.BSP_IntHandlerPVD) referenced from cstartup.o(RESET)
 <LI><a href="#[e]">BSP_IntHandlerRCC</a> from bsp_int.o(i.BSP_IntHandlerRCC) referenced from cstartup.o(RESET)
 <LI><a href="#[32]">BSP_IntHandlerRTCAlarm</a> from bsp_int.o(i.BSP_IntHandlerRTCAlarm) referenced from cstartup.o(RESET)
 <LI><a href="#[c]">BSP_IntHandlerRTC_WKUP</a> from bsp_int.o(i.BSP_IntHandlerRTC_WKUP) referenced from cstartup.o(RESET)
 <LI><a href="#[36]">BSP_IntHandlerSDIO</a> from bsp_int.o(i.BSP_IntHandlerSDIO) referenced from cstartup.o(RESET)
 <LI><a href="#[2c]">BSP_IntHandlerSPI1</a> from bsp_int.o(i.BSP_IntHandlerSPI1) referenced from cstartup.o(RESET)
 <LI><a href="#[2d]">BSP_IntHandlerSPI2</a> from bsp_int.o(i.BSP_IntHandlerSPI2) referenced from cstartup.o(RESET)
 <LI><a href="#[38]">BSP_IntHandlerSPI3</a> from bsp_int.o(i.BSP_IntHandlerSPI3) referenced from cstartup.o(RESET)
 <LI><a href="#[b]">BSP_IntHandlerTAMP_STAMP</a> from bsp_int.o(i.BSP_IntHandlerTAMP_STAMP) referenced from cstartup.o(RESET)
 <LI><a href="#[23]">BSP_IntHandlerTIM10</a> from bsp_int.o(i.BSP_IntHandlerTIM10) referenced from cstartup.o(RESET)
 <LI><a href="#[24]">BSP_IntHandlerTIM11</a> from bsp_int.o(i.BSP_IntHandlerTIM11) referenced from cstartup.o(RESET)
 <LI><a href="#[25]">BSP_IntHandlerTIM2</a> from bsp_int.o(i.BSP_IntHandlerTIM2) referenced from cstartup.o(RESET)
 <LI><a href="#[26]">BSP_IntHandlerTIM3</a> from bsp_int.o(i.BSP_IntHandlerTIM3) referenced from cstartup.o(RESET)
 <LI><a href="#[27]">BSP_IntHandlerTIM4</a> from bsp_int.o(i.BSP_IntHandlerTIM4) referenced from cstartup.o(RESET)
 <LI><a href="#[37]">BSP_IntHandlerTIM5</a> from bsp_int.o(i.BSP_IntHandlerTIM5) referenced from cstartup.o(RESET)
 <LI><a href="#[34]">BSP_IntHandlerTIM6</a> from bsp_int.o(i.BSP_IntHandlerTIM6) referenced from cstartup.o(RESET)
 <LI><a href="#[35]">BSP_IntHandlerTIM7</a> from bsp_int.o(i.BSP_IntHandlerTIM7) referenced from cstartup.o(RESET)
 <LI><a href="#[22]">BSP_IntHandlerTIM9</a> from bsp_int.o(i.BSP_IntHandlerTIM9) referenced from cstartup.o(RESET)
 <LI><a href="#[39]">BSP_IntHandlerUART4</a> from bsp_int.o(i.BSP_IntHandlerUART4) referenced from cstartup.o(RESET)
 <LI><a href="#[3a]">BSP_IntHandlerUART5</a> from bsp_int.o(i.BSP_IntHandlerUART5) referenced from cstartup.o(RESET)
 <LI><a href="#[2e]">BSP_IntHandlerUSART1</a> from stm32l1xx_it.o(i.BSP_IntHandlerUSART1) referenced from cstartup.o(RESET)
 <LI><a href="#[2f]">BSP_IntHandlerUSART2</a> from bsp_int.o(i.BSP_IntHandlerUSART2) referenced from cstartup.o(RESET)
 <LI><a href="#[30]">BSP_IntHandlerUSART3</a> from bsp_int.o(i.BSP_IntHandlerUSART3) referenced from cstartup.o(RESET)
 <LI><a href="#[33]">BSP_IntHandlerUSB_FS_WKUP</a> from bsp_int.o(i.BSP_IntHandlerUSB_FS_WKUP) referenced from cstartup.o(RESET)
 <LI><a href="#[1c]">BSP_IntHandlerUSB_HP</a> from bsp_int.o(i.BSP_IntHandlerUSB_HP) referenced from cstartup.o(RESET)
 <LI><a href="#[1d]">BSP_IntHandlerUSB_LP</a> from bsp_int.o(i.BSP_IntHandlerUSB_LP) referenced from cstartup.o(RESET)
 <LI><a href="#[9]">BSP_IntHandlerWWDG</a> from bsp_int.o(i.BSP_IntHandlerWWDG) referenced from cstartup.o(RESET)
 <LI><a href="#[46]">CLCWDT_Task</a> from main.o(i.CLCWDT_Task) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[47]">Instruction_Task</a> from main.o(i.Instruction_Task) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[4b]">LED0_Task</a> from main.o(i.LED0_Task) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[4c]">LED1_Task</a> from main.o(i.LED1_Task) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[49]">MAINPOWER_Task</a> from main.o(i.MAINPOWER_Task) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[44]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[7]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(CODE) referenced from cstartup.o(RESET)
 <LI><a href="#[8]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(i.OS_CPU_SysTickHandler) referenced from cstartup.o(RESET)
 <LI><a href="#[4f]">OS_IdleTask</a> from os_core.o(i.OS_IdleTask) referenced from os_core.o(i.OS_IdleTaskInit)
 <LI><a href="#[50]">OS_StatTask</a> from os_stat.o(i.OS_StatTask) referenced from os_stat.o(i.OS_StatTaskInit)
 <LI><a href="#[4e]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[51]">OS_TickTask</a> from os_tick.o(i.OS_TickTask) referenced from os_tick.o(i.OS_TickTaskInit)
 <LI><a href="#[52]">OS_TmrTask</a> from os_tmr.o(i.OS_TmrTask) referenced from os_tmr.o(i.OS_TmrInit)
 <LI><a href="#[48]">PAS_Task</a> from main.o(i.PAS_Task) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[0]">Reset_Handler</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[4a]">TEMP_Task</a> from main.o(i.TEMP_Task) referenced from main.o(i.AppTaskStart)
 <LI><a href="#[43]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from cstartup.o(.text)
 <LI><a href="#[42]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[45]">tmr1_callback</a> from timer.o(i.tmr1_callback) referenced from main.o(i.AppTaskStart)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[15d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[15e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[15f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[160]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>App_NMI_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NMI_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NMI_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>App_Fault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>App_MemFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MemFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MemFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>App_BusFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BusFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BusFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>App_UsageFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UsageFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UsageFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>App_Spurious_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Spurious_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Spurious_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>App_Reserved_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Reserved_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Reserved_ISR
</UL>

<P><STRONG><a name="[a4]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDisAll
</UL>

<P><STRONG><a name="[161]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[90]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[162]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[164]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadKeepRegistor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadInputRegistor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_Task
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b3]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSoftware
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSwitchMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSetInitalValue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryCalibration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_Task
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_Task
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[16d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[16e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[5b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[64]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[63]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[156]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[171]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[172]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[173]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[7]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>AD779x_Calibrate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, spi.o(i.AD779x_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = AD779x_Calibrate &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_SetMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ReadOffset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_DataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
</UL>

<P><STRONG><a name="[78]"></a>AD779x_ContinuousReadData1</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, spi.o(i.AD779x_ContinuousReadData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD779x_ContinuousReadData1 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_CS_Select
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_RequestData
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAS_Task
</UL>

<P><STRONG><a name="[75]"></a>AD779x_DataReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(i.AD779x_DataReady))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Calibrate
</UL>

<P><STRONG><a name="[7c]"></a>AD779x_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi.o(i.AD779x_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = AD779x_Init &rArr; AD779x_Set &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Reset
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Comm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_CS_Select
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_StatusRegisterRead
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ReadScale
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[72]"></a>AD779x_ReadOffset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spi.o(i.AD779x_ReadOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD779x_ReadOffset &rArr; AD779x_Comm &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Comm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Calibrate
</UL>

<P><STRONG><a name="[7f]"></a>AD779x_ReadScale</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spi.o(i.AD779x_ReadScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD779x_ReadScale &rArr; AD779x_Comm &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Comm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
</UL>

<P><STRONG><a name="[7a]"></a>AD779x_RequestData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi.o(i.AD779x_RequestData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD779x_RequestData &rArr; AD779x_Comm &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
</UL>

<P><STRONG><a name="[80]"></a>AD779x_Set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, spi.o(i.AD779x_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = AD779x_Set &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_CS_Select
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_WriteConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
</UL>

<P><STRONG><a name="[73]"></a>AD779x_SetMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi.o(i.AD779x_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD779x_SetMode &rArr; AD779x_Comm &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Comm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Calibrate
</UL>

<P><STRONG><a name="[7e]"></a>AD779x_StatusRegisterRead</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(i.AD779x_StatusRegisterRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD779x_StatusRegisterRead &rArr; AD779x_Comm &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Comm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
</UL>

<P><STRONG><a name="[81]"></a>AD779x_WriteConfig</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, spi.o(i.AD779x_WriteConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD779x_WriteConfig &rArr; AD779x_Comm &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Comm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Set
</UL>

<P><STRONG><a name="[dc]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
</UL>

<P><STRONG><a name="[da]"></a>ADC_DelaySelectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_DelaySelectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
</UL>

<P><STRONG><a name="[d0]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[cf]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[d8]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32l1xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
</UL>

<P><STRONG><a name="[db]"></a>ADC_PowerDownCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_PowerDownCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
</UL>

<P><STRONG><a name="[d9]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 344 bytes, Stack size 20 bytes, stm32l1xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
</UL>

<P><STRONG><a name="[ce]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[d7]"></a>ADC_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
</UL>

<P><STRONG><a name="[84]"></a>BSP_CPU_ClkFreq</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, bsp.o(i.BSP_CPU_ClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[82]"></a>BSP_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_Init &rArr; BSP_IntInit &rArr; BSP_IntVectSet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadAccess64Cmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_VoltageScalingConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[a3]"></a>BSP_IntDisAll</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntDisAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = BSP_IntDisAll
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>BSP_IntHandlerADC1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerADC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerADC1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>BSP_IntHandlerAES</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerAES))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerAES &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BSP_IntHandlerCOMP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCOMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCOMP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>BSP_IntHandlerCOMP_ACQ</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerCOMP_ACQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCOMP_ACQ &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BSP_IntHandlerDAC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDAC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BSP_IntHandlerDMA1_CH1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BSP_IntHandlerDMA1_CH2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BSP_IntHandlerDMA1_CH3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BSP_IntHandlerDMA1_CH4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BSP_IntHandlerDMA1_CH5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BSP_IntHandlerDMA1_CH6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH6 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BSP_IntHandlerDMA1_CH7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA1_CH7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_CH7 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>BSP_IntHandlerDMA2_CH1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>BSP_IntHandlerDMA2_CH2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>BSP_IntHandlerDMA2_CH3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>BSP_IntHandlerDMA2_CH4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>BSP_IntHandlerDMA2_CH5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerDMA2_CH5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_CH5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BSP_IntHandlerEXTI0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI0 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BSP_IntHandlerEXTI1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>BSP_IntHandlerEXTI15_10</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI15_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI15_10 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BSP_IntHandlerEXTI2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BSP_IntHandlerEXTI3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BSP_IntHandlerEXTI4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BSP_IntHandlerEXTI9_5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerEXTI9_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI9_5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BSP_IntHandlerFLASH</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerFLASH))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerFLASH &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BSP_IntHandlerI2C1_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C1_ER))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C1_ER &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>BSP_IntHandlerI2C1_EV</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C1_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C1_EV &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>BSP_IntHandlerI2C2_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C2_ER))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C2_ER &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>BSP_IntHandlerI2C2_EV</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerI2C2_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C2_EV &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BSP_IntHandlerLCD</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerLCD &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BSP_IntHandlerPVD</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerPVD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerPVD &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BSP_IntHandlerRCC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerRCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRCC &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>BSP_IntHandlerRTCAlarm</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerRTCAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRTCAlarm &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BSP_IntHandlerRTC_WKUP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerRTC_WKUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRTC_WKUP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>BSP_IntHandlerSDIO</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSDIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSDIO &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BSP_IntHandlerSPI1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI1 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>BSP_IntHandlerSPI2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>BSP_IntHandlerSPI3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerSPI3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BSP_IntHandlerTAMP_STAMP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTAMP_STAMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTAMP_STAMP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BSP_IntHandlerTIM10</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM10 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BSP_IntHandlerTIM11</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM11))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM11 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BSP_IntHandlerTIM2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BSP_IntHandlerTIM3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BSP_IntHandlerTIM4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>BSP_IntHandlerTIM5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BSP_IntHandlerTIM6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM6 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>BSP_IntHandlerTIM7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM7 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BSP_IntHandlerTIM9</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerTIM9))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM9 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>BSP_IntHandlerUART4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUART4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUART4 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>BSP_IntHandlerUART5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUART5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUART5 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>BSP_IntHandlerUSART1</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32l1xx_it.o(i.BSP_IntHandlerUSART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART1 &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BSP_IntHandlerUSART2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART2 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>BSP_IntHandlerUSART3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART3 &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BSP_IntHandlerUSB_FS_WKUP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSB_FS_WKUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSB_FS_WKUP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>BSP_IntHandlerUSB_HP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSB_HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSB_HP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BSP_IntHandlerUSB_LP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerUSB_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSB_LP &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BSP_IntHandlerWWDG</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntHandlerWWDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerWWDG &rArr; BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>BSP_IntInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_int.o(i.BSP_IntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BSP_IntInit &rArr; BSP_IntVectSet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[aa]"></a>BSP_IntVectSet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_int.o(i.BSP_IntVectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BSP_IntVectSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntInit
</UL>

<P><STRONG><a name="[46]"></a>CLCWDT_Task</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.CLCWDT_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = CLCWDT_Task &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReverse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[83]"></a>CPU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = CPU_Init &rArr; CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[ae]"></a>CPU_NameClr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>

<P><STRONG><a name="[b1]"></a>CPU_TS_TmrFreqSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_TS_TmrFreqSet))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[b0]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.CPU_TS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[10e]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[b6]"></a>CRC16_Check</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, modbus.o(i.CRC16_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSoftware
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSingleRegistor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSwitchMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSetInitalValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadKeepRegistor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadInputRegistor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryCalibration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
</UL>

<P><STRONG><a name="[b2]"></a>CTC</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, modbus.o(i.CTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = CTC &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[b8]"></a>DATA_EEPROM_EraseWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_EraseWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DATA_EEPROM_EraseWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
</UL>

<P><STRONG><a name="[ba]"></a>DATA_EEPROM_FastProgramWord</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_FastProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
</UL>

<P><STRONG><a name="[c9]"></a>DATA_EEPROM_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EERead_Z
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
</UL>

<P><STRONG><a name="[bb]"></a>DATA_EEPROM_ProgramByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_ProgramByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
</UL>

<P><STRONG><a name="[c8]"></a>DATA_EEPROM_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EERead_Z
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
</UL>

<P><STRONG><a name="[bc]"></a>DS18B20_Read_Byte</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, temp.o(i.DS18B20_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DS18B20_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
</UL>

<P><STRONG><a name="[be]"></a>DS18B20_Rst</STRONG> (Thumb, 274 bytes, Stack size 4 bytes, temp.o(i.DS18B20_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DS18B20_Rst
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
</UL>

<P><STRONG><a name="[bf]"></a>DS18B20_TEMP</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, temp.o(i.DS18B20_TEMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = DS18B20_TEMP &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_Task
</UL>

<P><STRONG><a name="[c2]"></a>DS18B20_Write_Byte</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, temp.o(i.DS18B20_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DS18B20_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
</UL>

<P><STRONG><a name="[bd]"></a>DS18B20_delayus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, temp.o(i.DS18B20_delayus))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
</UL>

<P><STRONG><a name="[c5]"></a>EERead</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ieeprom.o(i.EERead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EERead
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[c7]"></a>EERead_Z</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ieeprom.o(i.EERead_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EERead_Z
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SNInfo_Fun
</UL>

<P><STRONG><a name="[b5]"></a>EEWrite</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ieeprom.o(i.EEWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = EEWrite &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReverse
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSingleRegistor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSwitchMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSetInitalValue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryCalibration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[c6]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EERead_Z
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EERead
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[97]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[96]"></a>FLASH_ReadAccess64Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.FLASH_ReadAccess64Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[98]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[b9]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
</UL>

<P><STRONG><a name="[ca]"></a>FactoryCalibration</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, modbus.o(i.FactoryCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = FactoryCalibration &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[89]"></a>GPIO_Configuration</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, gpio.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[140]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_PinReverse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PinReverse))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLCWDT_Task
</UL>

<P><STRONG><a name="[13f]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_CS_Select
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_CS_Select
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
</UL>

<P><STRONG><a name="[cd]"></a>Get_Adc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iadc.o(i.Get_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Adc
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>

<P><STRONG><a name="[d1]"></a>Get_Adc_Average</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, iadc.o(i.Get_Adc_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Get_Adc_Average &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINPOWER_Task
</UL>

<P><STRONG><a name="[d3]"></a>Get_SNInfo_Fun</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, modbus.o(i.Get_SNInfo_Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_SNInfo_Fun &rArr; EERead_Z
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EERead_Z
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[d4]"></a>IADC_Configuration</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, iadc.o(i.IADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IADC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PowerDownCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelaySelectionConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINPOWER_Task
</UL>

<P><STRONG><a name="[8a]"></a>Init_Parameter</STRONG> (Thumb, 642 bytes, Stack size 16 bytes, main.o(i.Init_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Init_Parameter &rArr; EEWrite &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SNInfo_Fun
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinReverse
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EERead
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[dd]"></a>InputRegistorDataHton</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, modbus.o(i.InputRegistorDataHton))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InputRegistorDataHton &rArr; __ltobf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltobf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadInputRegistor
</UL>

<P><STRONG><a name="[df]"></a>Instruction_Process_Subfunction</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, modbus.o(i.Instruction_Process_Subfunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = Instruction_Process_Subfunction &rArr; ModbusFactoryParameterReset &rArr; UART1_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSoftware
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSingleRegistor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSwitchMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSetInitalValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadKeepRegistor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadInputRegistor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryCalibration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
</UL>

<P><STRONG><a name="[47]"></a>Instruction_Task</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, main.o(i.Instruction_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = Instruction_Task &rArr; Instruction_Process_Subfunction &rArr; ModbusFactoryParameterReset &rArr; UART1_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetChar
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_ClearBuf_Flag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[ec]"></a>KeepRegistorDataHton</STRONG> (Thumb, 454 bytes, Stack size 8 bytes, modbus.o(i.KeepRegistorDataHton))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KeepRegistorDataHton &rArr; __ltobf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltobf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadKeepRegistor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
</UL>

<P><STRONG><a name="[4b]"></a>LED0_Task</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(i.LED0_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LED0_Task &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[4c]"></a>LED1_Task</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.LED1_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LED1_Task &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[ed]"></a>Level_height_conversion</STRONG> (Thumb, 3414 bytes, Stack size 504 bytes, pas.o(i.Level_height_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Level_height_conversion &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAS_Task
</UL>

<P><STRONG><a name="[49]"></a>MAINPOWER_Task</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(i.MAINPOWER_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MAINPOWER_Task &rArr; Get_Adc_Average &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[af]"></a>Mem_Clr</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib_mem.o(i.Mem_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[f2]"></a>Mem_Set</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lib_mem.o(i.Mem_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>

<P><STRONG><a name="[e7]"></a>ModbusFactoryParameterReset</STRONG> (Thumb, 232 bytes, Stack size 272 bytes, modbus.o(i.ModbusFactoryParameterReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = ModbusFactoryParameterReset &rArr; UART1_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepRegistorDataHton
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[e1]"></a>ModbusReadInputRegistor</STRONG> (Thumb, 284 bytes, Stack size 296 bytes, modbus.o(i.ModbusReadInputRegistor))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ModbusReadInputRegistor &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputRegistorDataHton
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[e0]"></a>ModbusReadKeepRegistor</STRONG> (Thumb, 540 bytes, Stack size 296 bytes, modbus.o(i.ModbusReadKeepRegistor))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ModbusReadKeepRegistor &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepRegistorDataHton
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[b4]"></a>ModbusReturnAckInfo</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, modbus.o(i.ModbusReturnAckInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSoftware
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSingleRegistor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSwitchMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSetInitalValue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadKeepRegistor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadInputRegistor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryCalibration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[e5]"></a>ModbusSetInitalValue</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, modbus.o(i.ModbusSetInitalValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ModbusSetInitalValue &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[e6]"></a>ModbusSwitchMode</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, modbus.o(i.ModbusSwitchMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ModbusSwitchMode &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[e2]"></a>ModbusWriteSingleRegistor</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, modbus.o(i.ModbusWriteSingleRegistor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ModbusWriteSingleRegistor &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[e4]"></a>ModbusWriteSomeRegistor</STRONG> (Thumb, 1858 bytes, Stack size 72 bytes, modbus.o(i.ModbusWriteSomeRegistor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ModbusWriteSomeRegistor &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltobf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[14a]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[88]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[106]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(i.OSCfg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[12a]"></a>OSIdleTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSIdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIdleTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[f6]"></a>OSInit</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>OSInitHook</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a6]"></a>OSIntEnter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>

<P><STRONG><a name="[a7]"></a>OSIntExit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[108]"></a>OSSched</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, os_core.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[c0]"></a>OSSchedLock</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedLock &rArr; OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[87]"></a>OSSchedRoundRobinCfg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_core.o(i.OSSchedRoundRobinCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedRoundRobinCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[c1]"></a>OSSchedUnlock</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[10b]"></a>OSStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>OSStatReset</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, os_stat.o(i.OSStatReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStatReset
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrResetPeak
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListResetPeak
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[86]"></a>OSStatTaskCPUUsageInit</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, os_stat.o(i.OSStatTaskCPUUsageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSStatTaskCPUUsageInit &rArr; OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[13b]"></a>OSStatTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSStatTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStatTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[8f]"></a>OSTaskCreate</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[116]"></a>OSTaskCreateHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[112]"></a>OSTaskResume</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_task.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_TaskResume &rArr; OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[13c]"></a>OSTaskReturnHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[11b]"></a>OSTaskSemPend</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, os_task.o(i.OSTaskSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[11d]"></a>OSTaskSemPost</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[11f]"></a>OSTaskStkChk</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[114]"></a>OSTaskStkInit</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[111]"></a>OSTaskSuspend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[44]"></a>OSTaskSwHook</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[d2]"></a>OSTimeDly</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[74]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_Task
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAS_Task
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINPOWER_Task
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Task
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED0_Task
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLCWDT_Task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Calibrate
</UL>

<P><STRONG><a name="[123]"></a>OSTimeTick</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_time.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[124]"></a>OSTimeTickHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[8d]"></a>OSTmrCreate</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, os_tmr.o(i.OSTmrCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[127]"></a>OSTmrStart</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTmrStart &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAS_Task
</UL>

<P><STRONG><a name="[8]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_cpu_c.o(i.OS_CPU_SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[105]"></a>OS_Dbg_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, os_dbg.o(i.OS_Dbg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[fa]"></a>OS_FlagInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[4f]"></a>OS_IdleTask</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_core.o(i.OS_IdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; OSIdleTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_IdleTaskInit)
</UL>
<P><STRONG><a name="[101]"></a>OS_IdleTaskInit</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, os_core.o(i.OS_IdleTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[fb]"></a>OS_MemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[fc]"></a>OS_MsgPoolInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_msg.o(i.OS_MsgPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MsgPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[115]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(i.OS_MsgQInit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
</UL>

<P><STRONG><a name="[fd]"></a>OS_MutexInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[11c]"></a>OS_Pend</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(i.OS_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[12c]"></a>OS_PendDataInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OS_PendDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[12e]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[133]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[12d]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, os_core.o(i.OS_PendListInsertPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[12f]"></a>OS_PendListRemove</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(i.OS_PendListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[130]"></a>OS_PendListRemove1</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListRemove1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>

<P><STRONG><a name="[131]"></a>OS_Post</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, os_core.o(i.OS_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
</UL>

<P><STRONG><a name="[132]"></a>OS_Post1</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, os_core.o(i.OS_Post1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[107]"></a>OS_PrioGetHighest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_prio.o(i.OS_PrioGetHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[f8]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[117]"></a>OS_PrioInsert</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[139]"></a>OS_PrioRemove</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[fe]"></a>OS_QInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[f9]"></a>OS_RdyListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[137]"></a>OS_RdyListInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
</UL>

<P><STRONG><a name="[138]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[118]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[13a]"></a>OS_RdyListMoveHeadToTail</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListMoveHeadToTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
</UL>

<P><STRONG><a name="[122]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(i.OS_RdyListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
</UL>

<P><STRONG><a name="[109]"></a>OS_SchedLockTimeMeasStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[10a]"></a>OS_SchedLockTimeMeasStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[125]"></a>OS_SchedRoundRobin</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_core.o(i.OS_SchedRoundRobin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_SchedRoundRobin &rArr; OS_RdyListMoveHeadToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[ff]"></a>OS_SemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[50]"></a>OS_StatTask</STRONG> (Thumb, 686 bytes, Stack size 24 bytes, os_stat.o(i.OS_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(i.OS_StatTaskInit)
</UL>
<P><STRONG><a name="[103]"></a>OS_StatTaskInit</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, os_stat.o(i.OS_StatTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[12b]"></a>OS_TaskBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[119]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[100]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[113]"></a>OS_TaskInitTCB</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskInitTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[134]"></a>OS_TaskRdy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_core.o(i.OS_TaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
</UL>

<P><STRONG><a name="[11a]"></a>OS_TaskResume</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskResume &rArr; OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[4e]"></a>OS_TaskReturn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[11e]"></a>OS_TaskSemPost</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, os_task.o(i.OS_TaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>

<P><STRONG><a name="[120]"></a>OS_TaskSuspend</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>

<P><STRONG><a name="[13e]"></a>OS_TickListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_tick.o(i.OS_TickListInit))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
</UL>

<P><STRONG><a name="[121]"></a>OS_TickListInsert</STRONG> (Thumb, 430 bytes, Stack size 36 bytes, os_tick.o(i.OS_TickListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
</UL>

<P><STRONG><a name="[135]"></a>OS_TickListRemove</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_tick.o(i.OS_TickListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[10f]"></a>OS_TickListResetPeak</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_tick.o(i.OS_TickListResetPeak))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[13d]"></a>OS_TickListUpdate</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, os_tick.o(i.OS_TickListUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdate &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[51]"></a>OS_TickTask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(i.OS_TickTaskInit)
</UL>
<P><STRONG><a name="[102]"></a>OS_TickTaskInit</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, os_tick.o(i.OS_TickTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[126]"></a>OS_TmrDbgListAdd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_tmr.o(i.OS_TmrDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[104]"></a>OS_TmrInit</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, os_tmr.o(i.OS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[129]"></a>OS_TmrLink</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, os_tmr.o(i.OS_TmrLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_TmrLink
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[110]"></a>OS_TmrResetPeak</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_tmr.o(i.OS_TmrResetPeak))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[52]"></a>OS_TmrTask</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_tmr.o(i.OS_TmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TmrTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OS_TmrInit)
</UL>
<P><STRONG><a name="[128]"></a>OS_TmrUnlink</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, os_tmr.o(i.OS_TmrUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_TmrUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[48]"></a>PAS_Task</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(i.PAS_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = PAS_Task &rArr; Level_height_conversion &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[9b]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(i.PWR_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[9a]"></a>PWR_VoltageScalingConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(i.PWR_VoltageScalingConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[cb]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[99]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[148]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[d6]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINPOWER_Task
</UL>

<P><STRONG><a name="[147]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[93]"></a>RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[91]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, stm32l1xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[95]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[a2]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[9c]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[94]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[d5]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_HSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IADC_Configuration
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINPOWER_Task
</UL>

<P><STRONG><a name="[9e]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[9d]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[a0]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[9f]"></a>RCC_PLLConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[a1]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[e3]"></a>ResetSoftware</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, modbus.o(i.ResetSoftware))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ResetSoftware &rArr; ModbusReturnAckInfo &rArr; U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Process_Subfunction
</UL>

<P><STRONG><a name="[79]"></a>SPI1_CS_Select</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.SPI1_CS_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_CS_Select
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Set
</UL>

<P><STRONG><a name="[8c]"></a>SPI1_Configuration</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, spi.o(i.SPI1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI1_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[77]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Reset
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Comm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ContinuousReadData1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_WriteConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_StatusRegisterRead
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_SetMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ReadScale
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ReadOffset
</UL>

<P><STRONG><a name="[141]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
</UL>

<P><STRONG><a name="[142]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l1xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
</UL>

<P><STRONG><a name="[144]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[146]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[145]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[143]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l1xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
</UL>

<P><STRONG><a name="[4a]"></a>TEMP_Task</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, main.o(i.TEMP_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = TEMP_Task &rArr; DS18B20_TEMP &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_TEMP
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[b7]"></a>U485SendData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart.o(i.U485SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = U485SendData &rArr; USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSoftware
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSingleRegistor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSwitchMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSetInitalValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReturnAckInfo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadKeepRegistor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReadInputRegistor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryCalibration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC
</UL>

<P><STRONG><a name="[8b]"></a>UART1_Configuration</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, uart.o(i.UART1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART1_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFactoryParameterReset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[ea]"></a>USART1_ClearBuf_Flag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.USART1_ClearBuf_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
</UL>

<P><STRONG><a name="[e9]"></a>USART1_GetChar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(i.USART1_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_GetChar &rArr; USART1_GetCharBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetCharBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
</UL>

<P><STRONG><a name="[14d]"></a>USART1_GetCharBlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart.o(i.USART1_GetCharBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_GetCharBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GetChar
</UL>

<P><STRONG><a name="[eb]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
</UL>

<P><STRONG><a name="[14c]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[14f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PutChar
</UL>

<P><STRONG><a name="[a9]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l1xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART1
</UL>

<P><STRONG><a name="[e8]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32l1xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_Task
</UL>

<P><STRONG><a name="[14b]"></a>USART_Init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, stm32l1xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[14e]"></a>USART_PutChar</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(i.USART_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PutData
</UL>

<P><STRONG><a name="[149]"></a>USART_PutData</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uart.o(i.USART_PutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_PutData &rArr; USART_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U485SendData
</UL>

<P><STRONG><a name="[a8]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART1
</UL>

<P><STRONG><a name="[150]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PutChar
</UL>

<P><STRONG><a name="[15a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[151]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[152]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[153]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[154]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[155]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[157]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[175]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[176]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[177]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[158]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDisAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f1]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_height_conversion
</UL>

<P><STRONG><a name="[159]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[45]"></a>tmr1_callback</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timer.o(i.tmr1_callback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskStart)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[53]"></a>AppTaskStart</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, main.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; AD779x_Init &rArr; AD779x_Set &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[de]"></a>__ltobf</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, modbus.o(i.__ltobf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __ltobf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusWriteSomeRegistor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepRegistorDataHton
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputRegistorDataHton
</UL>

<P><STRONG><a name="[76]"></a>AD779x_Comm</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi.o(i.AD779x_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AD779x_Comm &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_WriteConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_StatusRegisterRead
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_SetMode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_RequestData
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ReadScale
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_ReadOffset
</UL>

<P><STRONG><a name="[7d]"></a>AD779x_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi.o(i.AD779x_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD779x_Reset &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD779x_Init
</UL>

<P><STRONG><a name="[a5]"></a>BSP_IntHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_int.o(i.BSP_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerWWDG
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSB_LP
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSB_HP
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSB_FS_WKUP
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART3
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUART5
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUART4
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM9
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM7
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM6
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM5
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM4
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM3
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM2
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM11
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM10
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTAMP_STAMP
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI3
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI2
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI1
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSDIO
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRTC_WKUP
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRTCAlarm
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRCC
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerPVD
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerLCD
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C2_EV
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C2_ER
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C1_EV
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C1_ER
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerFLASH
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI9_5
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI4
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI3
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI2
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI15_10
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI1
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI0
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH5
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH4
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH3
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_CH1
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH7
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH6
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH5
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH4
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH3
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH2
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_CH1
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDAC
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCOMP_ACQ
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCOMP
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerAES
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerADC1
</UL>

<P><STRONG><a name="[4d]"></a>BSP_IntHandlerDummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_int.o(i.BSP_IntHandlerDummy))
<BR>[Address Reference Count : 1]<UL><LI> bsp_int.o(i.BSP_IntInit)
</UL>
<P><STRONG><a name="[ad]"></a>CPU_NameInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = CPU_NameInit &rArr; CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[ac]"></a>CPU_TS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
